//-----------------------------------------------------------------------------------------------
// Vector2.cpp
// Vector with float X and Y components


//-----------------------------------------------------------------------------------------------
#include <cmath>

#include "Engine/Math/Vector2.hpp"


//-----------------------------------------------------------------------------------------------
Vector2::Vector2()
{
}


//-----------------------------------------------------------------------------------------------
Vector2::Vector2( float initialX, float initialY )
	: x( initialX )
	, y( initialY )
{
}


//-----------------------------------------------------------------------------------------------
Vector2::Vector2( const Vector2& vec ) 
	: x( vec.x ) 
	, y( vec.y ) 
{ 
}


//-----------------------------------------------------------------------------------------------
Vector2::Vector2( const Vector2* vec )
	: x( vec->x )
	, y( vec->y )
{
}


//-----------------------------------------------------------------------------------------------
Vector2::~Vector2()
{
}


//-----------------------------------------------------------------------------------------------
void Vector2::SetXY( float newX, float newY )
{
	x = newX;
	y = newY;
}


//-----------------------------------------------------------------------------------------------
float Vector2::Length() const 
{ 
	return sqrt( ( x * x ) + ( y * y ) ); 
}


//-----------------------------------------------------------------------------------------------
float Vector2::LengthSquared() const 
{ 
	return ( ( x * x ) + ( y * y ) ); 
}


//-----------------------------------------------------------------------------------------------
Vector2& Vector2::Normalize()
{
	float length = Length();
	if ( length != 0.f )
	{
		float oneOverLength = ( 1.f / length );
		x *= oneOverLength;
		y *= oneOverLength;
	}

	return *this;
}


//-----------------------------------------------------------------------------------------------
Vector2& Vector2::Negate()
{
	x = -x;
	y = -y;

	return *this;
}


//-----------------------------------------------------------------------------------------------
bool Vector2::operator < ( const Vector2& rhs ) const
{
	if ( y < rhs.y )
		return true;
	if ( rhs.y < y )
		return false;
	return ( x < rhs.x );
}


//-----------------------------------------------------------------------------------------------
const Vector2 Vector2::ZERO( 0.0f, 0.0f );
const Vector2 Vector2::ONE( 1.0f, 1.0f );